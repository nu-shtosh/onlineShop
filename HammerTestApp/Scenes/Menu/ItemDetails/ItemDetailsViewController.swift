//
//  ItemDetailsViewController.swift
//  HammerTestApp
//
//  Created by Илья Дубенский on 04.04.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ItemDetailsDisplayLogic: AnyObject {
    func displayItemDetails(viewModel: ItemDetails.ShowDetails.ViewModel)
}

class ItemDetailsViewController: UIViewController {

    private lazy var itemImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.backgroundColor = .lightGray
        return imageView
    }()

    private lazy var activityIndicatorView: UIActivityIndicatorView = {
        let activityIndicatorView = UIActivityIndicatorView()
        activityIndicatorView.translatesAutoresizingMaskIntoConstraints = false
        activityIndicatorView.hidesWhenStopped = true
        return activityIndicatorView
    }()

    private lazy var itemNameLabel: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()

    private lazy var itemDescriptionLabel: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()

    private lazy var itemPriceButton: UIButton = {
        let button = UIButton(type: .system)
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()

    var interactor: ItemDetailsBusinessLogic?
    var router: (NSObjectProtocol & ItemDetailsRoutingLogic & ItemDetailsDataPassing)?
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        ItemDetailsConfigurator.shared.configure(with: self)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        ItemDetailsConfigurator.shared.configure(with: self)
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        activityIndicatorView.startAnimating()
        setupMainView()
        addSubviews()
        setupConstraints()
        passRequest()
    }

    private func passRequest() {
        interactor?.provideItemDetails()
    }
}

extension ItemDetailsViewController {
    private func setupMainView() {
        view.backgroundColor = .white
    }

    private func addSubviews() {
        view.addSubview(itemImageView)
        itemImageView.addSubview(activityIndicatorView)

        view.addSubview(itemNameLabel)
        view.addSubview(itemDescriptionLabel)
        view.addSubview(itemPriceButton)
    }

    private func setupConstraints() {
        NSLayoutConstraint.activate([
            itemImageView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 15),
            itemImageView.centerXAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerXAnchor),
            itemImageView.widthAnchor.constraint(equalToConstant: 150),
            itemImageView.heightAnchor.constraint(equalToConstant: 150),

            activityIndicatorView.centerXAnchor.constraint(equalTo: itemImageView.centerXAnchor),
            activityIndicatorView.centerYAnchor.constraint(equalTo: itemImageView.centerYAnchor),

            itemNameLabel.topAnchor.constraint(equalTo: itemImageView.bottomAnchor, constant: 15),
            itemNameLabel.centerXAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerXAnchor),

            itemDescriptionLabel.topAnchor.constraint(equalTo: itemNameLabel.bottomAnchor, constant: 15),
            itemNameLabel.centerXAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerXAnchor),

            itemPriceButton.topAnchor.constraint(equalTo: itemDescriptionLabel.bottomAnchor, constant: 15),
            itemNameLabel.centerXAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerXAnchor),
        ])
    }
}

extension ItemDetailsViewController: ItemDetailsDisplayLogic {
    func displayItemDetails(viewModel: ItemDetails.ShowDetails.ViewModel) {
        ImageManager.shared.fetchImage(from: viewModel.imageURL) { [weak self] result in
            switch result {
            case .success(let imageData):
                self?.itemImageView.image = UIImage(data: imageData)
                self?.activityIndicatorView.stopAnimating()
            case .failure(let error):
                print(error.localizedDescription)
            }
        }
        itemNameLabel.text = viewModel.title
        itemDescriptionLabel.text = viewModel.description
        itemPriceButton.setTitle(viewModel.price, for: .normal)
    }
}
